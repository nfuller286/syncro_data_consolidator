# SDC V2.0: Data Flow and Model Structure Visualization

## Part 1: Conceptual Data Flow

This flowchart shows how raw data is transformed into billable insights.

```mermaid
graph TD
    subgraph "Raw Data Sources"
        A[ScreenConnect CSV]
        B[SillyTavern .jsonl]
        C[Syncro Ticket API]
        D[Legacy notes.json]
    end

    subgraph "Stage 1: Ingestion & Session Creation"
        direction LR
        A --> E{Ingestor A}
        B --> F{Ingestor B}
        C --> G{Ingestor C}
        D --> H{Ingestor D}

        E --> I[Session Object]
        F --> I
        G --> I
        H --> I
    end

    subgraph "Manual Enrichment & Storage"
        I -- "Save to JSON" --> J(fa:fa-file-alt Session.json)
        K(Nick's Review) -- "Adds notes & project links" --> J
        J -- "Smart Update preserves manual edits" --> L{System Re-processes}
        L --> J
    end

    subgraph "Stage 2: Work Item Aggregation"
        J -- "Load All Sessions" --> M[Work Item Generator]
        M -- "Groups by time" --> N[Work Item Object]
    end

    subgraph "Final Output & Reporting"
        N -- "Save to JSON" --> O(fa:fa-file-alt WorkItem.json)
        O -- "Read by Report Generator" --> P((fa:fa-dollar-sign Project Report))
        J -- "Read by Report Generator" --> P
    end

    style J fill:#f9f,stroke:#333,stroke-width:2px
    style O fill:#ccf,stroke:#333,stroke-width:2px
```

**Flow Explanation:**

1.  **Raw Data Sources:** We start with various raw log files and API data.
2.  **Stage 1 (Ingestion):** Each data source is processed by its own dedicated `Ingestor`. The ingestor's job is to read the raw data and produce one or more standardized `Session` objects.
3.  **Manual Enrichment & Storage:** The `Session` objects are saved as individual JSON files. This is the **critical interaction point**. You, Nick, can open these files to add your notes or project tags. When the system re-runs, its "Smart Update" logic ensures your manual edits are never lost.
4.  **Stage 2 (Aggregation):** A separate process, the `Work Item Generator`, loads all the `Session.json` files. It looks for sessions that occurred close together in time (even from different sources) and merges them into a single `Work Item` object.
5.  **Final Output:** The `Work Item` objects are saved as their own JSON files. A final `Report Generator` can then read both the `Work Items` and the `Sessions` to create a comprehensive project summary for billing.


---

## Part 2: Visual Model Structure

This shows the hierarchical layout of the Pydantic models, illustrating how they are composed.

### `Session` Model Layout

```
Session
├── meta: SessionMeta
│   ├── session_id: str (Deterministic Hash)
│   ├── schema_version: str
│   ├── source_system: str
│   ├── source_identifiers: List[str]
│   ├── processing_status: str
│   └── last_updated_timestamp_utc: datetime
│
├── context: SessionContext
│   ├── customer_id: Optional[int]
│   ├── customer_name: Optional[str]
│   ├── contact_id: Optional[int]
│   ├── contact_name: Optional[str]
│   └── links: List[str]  (Your Project Tags)
│
├── insights: SessionInsights
│   ├── session_start_time_utc: datetime
│   ├── session_end_time_utc: datetime
│   ├── session_duration_minutes: int
│   └── user_notes: str  (Your Notes)
│
└── segments: List[SessionSegment]
    └── [
          {
            segment_id: str
            start_time_utc: datetime
            end_time_utc: datetime
            type: str
            author: Optional[str]
            content: Optional[str]
            metadata: Dict
          },
          ...
        ]
```

### `Work Item` Model Layout

```
WorkItem
├── work_item_id: str (Random UUID)
├── schema_version: str
├── customer_id: Optional[int]
├── component_session_ids: List[str]  (Links back to Session objects)
├── calculated_links: List[str]
└── calculated_insights: WorkItemCalculatedInsights
    ├── work_item_start_time_utc: datetime
    ├── work_item_end_time_utc: datetime
    └── total_duration_minutes: int
```

This structured layout should provide a clear, at-a-glance reference for how our data is organized. When you're ready, we can pull up the V1 `CUIS` model and do a direct comparison to see exactly what's changing and why.
